#!/usr/bin/python

# ask
# 11-411 NLP Spring 2013, Group 6
# (Stub) Authored by Ryhan Hassan | rhassan@andrew.cmu.edu

# Useful tools which should be pre-installed
import os, sys, errno
import re
import itertools
import nltk

# Import our modules from /modules
sys.path.append("modules")
import questionContentSelector
import questionFromSentence

# turns a declarative sentence into a question
def sentenceToQuestion(sentence):
    question = sentence
    if ("It is" in sentence) and (sentence[len(sentence) -1] == "."):
      question = sentence[:len(sentence)-1] + str("?")
      question = sentence.replace("It is", "What is")
    elif " is " in question:
        i = question.index("is")
        question = question[i:i+2] + question[:i] + quesiton[i+2:]
    return question

if __name__ == '__main__':
  path_to_article = sys.argv[1]
  num_questions = int(sys.argv[2])
  print("Generating " + str(num_questions) + " questions:")

  # Pre-process article content.
  article_content = open(path_to_article).read()

  # Should probably apply co-reference resolution to article content here.

  # Decide how many candidates we want to generate
  # im thinking we should always generate as many questions as possible
  # and just pick the n best
  num_cand = num_questions*10

  # Fetch sentence candidates that can be converted into questions.
  selected_content = questionContentSelector.process(article_content, num_cand)

  # Use POS Tagging and Transformation rules to generate questions
  questions = questionFromSentence.process(selected_content)

  # Rank generated questions and return top [:num_questions]

  questions = questions[:num_questions]
  for question in questions:
    print(question + "\n")