#!/usr/bin/python

# answer
# 11-411 NLP Spring 2013, Group 6

# Useful tools which should be pre-installed
import os, sys, errno
import subprocess
import re
import itertools
import nltk
from nltk.stem import PorterStemmer
# Import our modules from /modules
sys.path.append("modules")
import questionClassifier
import sourceContentSelector

def contains_negative(sent):
  return "no" in sent or "not" in sent or "n't" in sent

def coref(path_to_article):
  #subprocess.call(["./arkref.sh", "-input", path_to_article])
  return open(path_to_article).read()

# picks the sentence that has the most keywords in common with the question
def answer(question, article):
    question = question.strip()
    question_type = questionClassifier.process(question)
    question = nltk.tokenize.word_tokenize(question)
    relevant = sourceContentSelector.getRelevantSentences(question, article)
    relevant.sort(key = lambda s: s[1], reverse=True)
    top = relevant[0][0]
    if question_type == "BOOLEAN":
      if contains_negative(top): return "NO"
      else: return "YES"
    else:
      return top


if __name__ == '__main__':
  article_name = sys.argv[1]

  for year in ("S08", "S09", "S10"):
    print "Year:", year
    prefix = "Question_Answer_Dataset_v1.1/"+year+"/"
    question_answer_pairs = open(prefix+"question_answer_pairs.txt").readlines()
    question_answer_pairs.pop(0)
    for line in question_answer_pairs:
      if not line.startswith(article_name): continue
      line = line.lstrip(article_name)
      end = line.find("?")
      if end == -1: continue
      question = line[:end+1].strip()
      line = line[end+1:].split()
      path_to_article = prefix+line.pop()+".txt"
      difficulty_answerer = line.pop()
      difficulty_questioner = line.pop()
      correct_answer = " ".join(line)

      print "Question:", question
      print "Difficulty from answerer:", difficulty_answerer
      print "Difficulty from questioner:", difficulty_questioner

      # Open the question file and start answering questions.
      article = coref(path_to_article)
      print "Our answer:", answer(question, article)
      print "Correct answer:", correct_answer

    print
